"""
irregular_verbs_create module.

Holds functions to help create exercise PDFs for irregular verbs.
"""
from random import shuffle
from time import time


def set_header(pdf, title, version):
    """Set the header for the PDF file.

    :pdf: PDF object generated by PyFPDF.
    :title: Main title of the sheet.
    :version: test OR correction sheet.

    """
    pdf.set_font('Arial', 'B', size=16)
    pdf.cell(0, 15, txt=title, ln=1, align='C')

    if version == 'test':
        pdf.set_font('Arial', 'I', size=11)
        pdf.cell(0, 5, txt='Remplir les champs manquants et donner'
                 ' la traduction des verbes.', ln=1, align='C')
        pdf.cell(0, 6, txt='De gauche à droite : base verbale'
                 ' - prétérit - participe passé - traduction',
                 ln=1, align='C')


def import_verbs(list_file):
    """Import the verbs list into a suitable array.

    :list_file: CSV file containing the irregular verbs.
    """
    with open(list_file, 'r') as file:
        file.seek(53)
        verbs = []
        for line in file:
            verbs.append(line[:-2].split(' ,'))
        return verbs


def generate_tables(verbs):
    """Generate the answer rows with only one clue chosen at random.

    :verbs: contains the array of irregular verbs and the 4 forms.
    :returns: test and answer tables with indices of the forms.
    """
    indices = list(range(len(verbs)))
    shuffle(indices)
    verb_indices = indices[0:20]

    form_indices = 5*[0, 1, 2, 3]
    shuffle(form_indices)

    data_test = []
    data_correction = []
    for i in range(20):
        line = 4*['']
        line[form_indices[i]] = verbs[verb_indices[i]][form_indices[i]]
        data_test.append(line)
        data_correction.append(verbs[verb_indices[i]])

    return data_test, data_correction, form_indices


def performance(func):
    def wrapper(*args, **kwargs):
        t1 = time()
        func(*args, **kwargs)
        t2 = time()
        print(f"Elapsed: {t2-t1} s.")
    return wrapper
